//
//
// Tencent is pleased to support the open source community by making tRPC available.
//
// Copyright (C) 2023 Tencent.
// All rights reserved.
//
// If you have downloaded a copy of the tRPC source code from Tencent,
// please note that tRPC source code is licensed under the  Apache 2.0 License,
// A copy of the Apache 2.0 License is included in this file.
//
//

// This file was generated by trpc_fbs_plugin  compiler plugin, do not edit it!!!.
// If you make any local change, they will be lost.
// source: trpc/tools/flatbuffers_tool/testing/greeter

#include "trpc/tools/flatbuffers_tool/testing/greeter.trpc.fb.h"

#include <functional>

#include "trpc/server/rpc_method_handler.h"

namespace trpc {
namespace test {
namespace helloworld {

static const char* Greeter_method_names[] = {
  "/trpc.test.helloworld.Greeter/SayHello",
  "/trpc.test.helloworld.Greeter/SayManyHellos",
};

Greeter::Greeter() {
  AddRpcServiceMethod(
      new ::trpc::RpcServiceMethod(Greeter_method_names[0], ::trpc::MethodType::UNARY,
                                 new ::trpc::RpcMethodHandler<flatbuffers::trpc::Message<trpc::test::helloworld::HelloRequest>, flatbuffers::trpc::Message<trpc::test::helloworld::HelloReply>>(
                                     std::bind(&Greeter::SayHello, this, std::placeholders::_1,
                                               std::placeholders::_2, std::placeholders::_3))));
  AddRpcServiceMethod(
      new ::trpc::RpcServiceMethod(Greeter_method_names[1], ::trpc::MethodType::UNARY,
                                 new ::trpc::RpcMethodHandler<flatbuffers::trpc::Message<trpc::test::helloworld::ManyHellosRequest>, flatbuffers::trpc::Message<trpc::test::helloworld::HelloReply>>(
                                     std::bind(&Greeter::SayManyHellos, this, std::placeholders::_1,
                                               std::placeholders::_2, std::placeholders::_3))));
}

::trpc::Status Greeter::SayHello(const ::trpc::ServerContextPtr& context, const flatbuffers::trpc::Message<trpc::test::helloworld::HelloRequest>* request, flatbuffers::trpc::Message<trpc::test::helloworld::HelloReply>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::trpc::Status(-1, "");
}

::trpc::Status Greeter::SayManyHellos(const ::trpc::ServerContextPtr& context, const flatbuffers::trpc::Message<trpc::test::helloworld::ManyHellosRequest>* request, flatbuffers::trpc::Message<trpc::test::helloworld::HelloReply>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::trpc::Status(-1, "");
}

::trpc::Status GreeterServiceProxy::SayHello(const ::trpc::ClientContextPtr& context, const flatbuffers::trpc::Message<trpc::test::helloworld::HelloRequest>& request, flatbuffers::trpc::Message<trpc::test::helloworld::HelloReply>* response) {
  context->SetFuncName(Greeter_method_names[0]);
  context->SetReqEncodeType(trpc::EncodeType::FLATBUFFER);
  return UnaryInvoke<flatbuffers::trpc::Message<trpc::test::helloworld::HelloRequest>, flatbuffers::trpc::Message<trpc::test::helloworld::HelloReply>>(context, request, response);
}

::trpc::Future<flatbuffers::trpc::Message<trpc::test::helloworld::HelloReply>> GreeterServiceProxy::AsyncSayHello(const ::trpc::ClientContextPtr& context, const flatbuffers::trpc::Message<trpc::test::helloworld::HelloRequest>& request) {
  context->SetFuncName(Greeter_method_names[0]);
  context->SetReqEncodeType(trpc::EncodeType::FLATBUFFER);
  return AsyncUnaryInvoke<flatbuffers::trpc::Message<trpc::test::helloworld::HelloRequest>, flatbuffers::trpc::Message<trpc::test::helloworld::HelloReply>>(context, request);
}

::trpc::Status GreeterServiceProxy::SayManyHellos(const ::trpc::ClientContextPtr& context, const flatbuffers::trpc::Message<trpc::test::helloworld::ManyHellosRequest>& request, flatbuffers::trpc::Message<trpc::test::helloworld::HelloReply>* response) {
  context->SetFuncName(Greeter_method_names[1]);
  context->SetReqEncodeType(trpc::EncodeType::FLATBUFFER);
  return UnaryInvoke<flatbuffers::trpc::Message<trpc::test::helloworld::ManyHellosRequest>, flatbuffers::trpc::Message<trpc::test::helloworld::HelloReply>>(context, request, response);
}

::trpc::Future<flatbuffers::trpc::Message<trpc::test::helloworld::HelloReply>> GreeterServiceProxy::AsyncSayManyHellos(const ::trpc::ClientContextPtr& context, const flatbuffers::trpc::Message<trpc::test::helloworld::ManyHellosRequest>& request) {
  context->SetFuncName(Greeter_method_names[1]);
  context->SetReqEncodeType(trpc::EncodeType::FLATBUFFER);
  return AsyncUnaryInvoke<flatbuffers::trpc::Message<trpc::test::helloworld::ManyHellosRequest>, flatbuffers::trpc::Message<trpc::test::helloworld::HelloReply>>(context, request);
}

}  // namespace trpc
}  // namespace test
}  // namespace helloworld
