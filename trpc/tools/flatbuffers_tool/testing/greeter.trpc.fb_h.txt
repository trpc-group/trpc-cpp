//
//
// Tencent is pleased to support the open source community by making tRPC available.
//
// Copyright (C) 2023 Tencent.
// All rights reserved.
//
// If you have downloaded a copy of the tRPC source code from Tencent,
// please note that tRPC source code is licensed under the  Apache 2.0 License,
// A copy of the Apache 2.0 License is included in this file.
//
//

// This file was generated by trpc_fbs_plugin  compiler plugin, do not edit it!!!.
// If you make any local change, they will be lost.
// source: trpc/tools/flatbuffers_tool/testing/greeter

#pragma once

#include "trpc/tools/flatbuffers_tool/testing/greeter_generated.h"

#include "trpc/common/status.h"
#include "trpc/server/rpc_service_impl.h"
#include "trpc/client/rpc_service_proxy.h"

#include "trpc/util/flatbuffers/trpc_fbs.h"

namespace trpc {
namespace test {
namespace helloworld {

class Greeter : public ::trpc::RpcServiceImpl {
 public:
  Greeter();

  virtual ::trpc::Status SayHello(const ::trpc::ServerContextPtr& context, const flatbuffers::trpc::Message<trpc::test::helloworld::HelloRequest>* request, flatbuffers::trpc::Message<trpc::test::helloworld::HelloReply>* response);

  virtual ::trpc::Status SayManyHellos(const ::trpc::ServerContextPtr& context, const flatbuffers::trpc::Message<trpc::test::helloworld::ManyHellosRequest>* request, flatbuffers::trpc::Message<trpc::test::helloworld::HelloReply>* response);
};

class GreeterServiceProxy : public ::trpc::RpcServiceProxy {
 public:
  virtual ::trpc::Status SayHello(const ::trpc::ClientContextPtr& context, const flatbuffers::trpc::Message<trpc::test::helloworld::HelloRequest>& request, flatbuffers::trpc::Message<trpc::test::helloworld::HelloReply>* response);
  virtual ::trpc::Future<flatbuffers::trpc::Message<trpc::test::helloworld::HelloReply>> AsyncSayHello(const ::trpc::ClientContextPtr& context, const flatbuffers::trpc::Message<trpc::test::helloworld::HelloRequest>& request);

  virtual ::trpc::Status SayManyHellos(const ::trpc::ClientContextPtr& context, const flatbuffers::trpc::Message<trpc::test::helloworld::ManyHellosRequest>& request, flatbuffers::trpc::Message<trpc::test::helloworld::HelloReply>* response);
  virtual ::trpc::Future<flatbuffers::trpc::Message<trpc::test::helloworld::HelloReply>> AsyncSayManyHellos(const ::trpc::ClientContextPtr& context, const flatbuffers::trpc::Message<trpc::test::helloworld::ManyHellosRequest>& request);
};

}  // namespace helloworld
}  // namespace test
}  // namespace trpc
